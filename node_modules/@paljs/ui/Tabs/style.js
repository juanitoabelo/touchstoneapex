"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _utils = require("../utils");

var _templateObject, _templateObject2;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var TabsStyle = _styledComponents["default"].div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  ", "\n"])), function (_ref) {
  var theme = _ref.theme,
      fullWidth = _ref.fullWidth;
  return (0, _styledComponents.css)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    display: block;\n    background-color: ", ";\n    border-radius: ", ";\n    box-shadow: ", ";\n    .tabs {\n      border-bottom: ", " ", " ", ";\n      display: flex;\n      flex-direction: row;\n      list-style-type: none;\n      margin: 0;\n      padding: 0;\n      ", "\n\n      .tab {\n        cursor: pointer;\n        margin-bottom: -1px;\n        text-align: center;\n        position: relative;\n        &.active a::before {\n          display: block;\n        }\n        a {\n          background-color: ", ";\n          padding: ", ";\n          color: ", ";\n          font-family: ", ";\n          font-size: ", ";\n          font-weight: ", ";\n          line-height: ", ";\n          text-transform: ", ";\n          display: flex;\n          align-items: center;\n          position: relative;\n          text-decoration: none;\n\n          &::before {\n            display: none;\n            position: absolute;\n            content: '';\n            width: 100%;\n            border-radius: 3px;\n            bottom: -2px;\n            left: 0;\n            background-color: ", ";\n            height: ", ";\n          }\n          .tabs-icon {\n            vertical-align: middle;\n          }\n\n          .tabs-icon + span {\n            margin-", ": 0.5rem;\n          }\n        }\n\n        &.active {\n          a {\n            background-color: ", ";\n            color: ", ";\n            &::before {\n              background-color: ", ";\n            }\n          }\n        }\n        &:focus {\n          a {\n            background-color: ", ";\n            color: ", ";\n            &::before {\n              background-color: ", ";\n            }\n          }\n        }\n\n        &:hover {\n          a {\n            color: ", ";\n            background-color: ", ";\n            &::before {\n              background-color: ", ";\n            }\n          }\n        }\n        &.disabled {\n          & > * {\n            opacity: 0.5;\n          }\n          cursor: default;\n          pointer-events: none;\n          a {\n            background-color: ", ";\n            color: ", ";\n            cursor: default;\n            pointer-events: none;\n            &::before {\n              background-color: ", ";\n            }\n          }\n        }\n\n        &.responsive {\n          @media screen and (max-width: ", ") {\n            a span {\n              display: none;\n            }\n          }\n        }\n      }\n    }\n    .tab-content {\n      flex: 1;\n      -ms-flex: 1 1 auto;\n      overflow: auto;\n      background-color: ", ";\n      color: ", ";\n      font-family: ", ";\n      font-size: ", ";\n      font-weight: ", ";\n      line-height: ", ";\n      padding: ", ";\n      ", "\n    }\n  "])), theme.tabsetBackgroundColor, theme.tabsetBorderRadius, theme.tabsetShadow, theme.tabsetDividerWidth, theme.tabsetDividerStyle, theme.tabsetDividerColor, fullWidth && 'justify-content: space-around;', theme.tabsetTabBackgroundColor, theme.tabsetTabPadding, theme.tabsetTabTextColor, theme.tabsetTabTextFontFamily, theme.tabsetTabTextFontSize, theme.tabsetTabTextFontWeight, theme.tabsetTabTextLineHeight, theme.tabsetTabTextTransform, theme.tabsetTabUnderlineColor, theme.tabsetTabUnderlineWidth, theme.dir === 'rtl' ? 'right' : 'left', theme.tabsetTabActiveBackgroundColor, theme.tabsetTabActiveTextColor, theme.tabsetTabActiveUnderlineColor, theme.tabsetTabFocusBackgroundColor, theme.tabsetTabFocusTextColor, theme.tabsetTabFocusUnderlineColor, theme.tabsetTabHoverTextColor, theme.tabsetTabHoverBackgroundColor, theme.tabsetTabHoverUnderlineColor, theme.tabsetTabDisabledBackgroundColor, theme.tabsetTabDisabledTextColor, theme.tabsetTabDisabledUnderlineColor, theme.tabsetTabTextHideBreakpoint, theme.tabsetContentBackgroundColor, theme.tabsetContentTextColor, theme.tabsetContentTextFontFamily, theme.tabsetContentTextFontSize, theme.tabsetContentTextFontWeight, theme.tabsetContentTextLineHeight, theme.tabsetContentPadding, (0, _utils.scrollbars)(theme.tabsetScrollbarColor, theme.tabsetScrollbarBackgroundColor, theme.tabsetScrollbarWidth));
});

var _default = TabsStyle;
exports["default"] = _default;