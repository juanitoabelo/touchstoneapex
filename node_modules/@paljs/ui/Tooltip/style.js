"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _templateObject, _templateObject2, _templateObject3;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var TooltipStyle = _styledComponents["default"].div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  ", "\n"])), function (_ref) {
  var theme = _ref.theme,
      status = _ref.status,
      arrowSize = _ref.arrowSize;
  return (0, _styledComponents.css)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    box-shadow: ", ";\n    background: ", ";\n    border: ", " ", " ", ";\n    border-radius: ", ";\n    padding: ", ";\n    max-width: ", ";\n    z-index: 10000;\n    .content {\n      display: flex;\n      align-items: center;\n      color: ", ";\n      font-family: ", ";\n      font-size: ", ";\n      font-weight: ", ";\n      line-height: ", ";\n    }\n\n    .arrow {\n      position: absolute;\n      width: 0;\n      height: 0;\n      border-bottom: ", " ", " ", ";\n      border-left: ", " solid transparent;\n      border-right: ", " solid transparent;\n    }\n\n    .icon:only-child {\n      height: ", ";\n      width: ", ";\n    }\n    .icon:not(:only-child) {\n      height: ", ";\n      width: ", ";\n    }\n\n    span {\n      line-height: 1.25rem;\n    }\n\n    ", "\n  "])), theme.tooltipShadow, theme.tooltipBackgroundColor, theme.tooltipBorderWidth, theme.tooltipBorderStyle, theme.tooltipBorderColor, theme.tooltipBorderRadius, theme.tooltipPadding, theme.tooltipMaxWidth, theme.tooltipTextColor, theme.tooltipTextFontFamily, theme.tooltipTextFontSize, theme.tooltipTextFontWeight, theme.tooltipTextLineHeight, arrowSize, theme.tooltipBorderStyle, theme.tooltipBackgroundColor, arrowSize, arrowSize, theme.tooltipIconHeight, theme.tooltipIconWidth, theme.tooltipTextFontSize, theme.tooltipTextFontSize, status && (0, _styledComponents.css)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n      background: ", ";\n      border-color: ", ";\n\n      .arrow {\n        border-bottom-color: ", ";\n      }\n\n      .content {\n        color: ", ";\n      }\n    "])), theme["tooltip".concat(status, "BackgroundColor")], theme["tooltip".concat(status, "BorderColor")], theme["tooltip".concat(status, "BackgroundColor")], theme["tooltip".concat(status, "TextColor")]));
});

var _default = TooltipStyle;
exports["default"] = _default;