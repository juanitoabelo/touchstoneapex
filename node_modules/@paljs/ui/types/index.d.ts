import { IconProps } from '../Icon';
export interface Badge {
    status: Status;
    title: string;
    position: Position;
}
export declare type Position = 'topRight' | 'topLeft' | 'bottomRight' | 'bottomLeft' | 'topStart' | 'topEnd' | 'bottomStart' | 'bottomEnd';
export declare type Placement = 'start' | 'end' | 'right' | 'left' | 'top' | 'bottom';
export declare type Trigger = 'click' | 'hover' | 'focus' | 'hint';
export declare type Status = 'Info' | 'Success' | 'Danger' | 'Primary' | 'Warning' | 'Basic' | 'Control';
export declare type Size = 'Tiny' | 'Small' | 'Medium' | 'Large' | 'Giant';
export declare type Shape = 'Rectangle' | 'SemiRound' | 'Round';
export declare type Appearance = 'filled' | 'outline' | 'ghost' | 'hero';
export declare type IconField = string | IconProps;
interface ItemType {
    title: string;
    expanded?: boolean;
    selected?: boolean;
    hidden?: boolean;
    icon?: IconField;
    hasDynamicPath?: boolean;
    url: string;
    link: {
        [k: string]: any;
    };
    group: boolean;
    extras?: {
        position: 'after' | 'before';
        content: any;
    }[];
    children: RequireOnlyOne<ItemType, 'url' | 'children' | 'link' | 'group'>[];
}
export declare type MenuItemType = RequireOnlyOne<ItemType, 'url' | 'children' | 'link' | 'group'>;
export interface ButtonTypes {
    fullWidth?: boolean;
    pulse?: boolean;
    appearance?: Appearance;
    size?: Size;
    shape?: Shape;
    status?: Status;
}
declare type RequireOnlyOne<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> & {
    [K in Keys]-?: Required<Pick<T, K>> & Partial<Record<Exclude<Keys, K>, undefined>>;
}[Keys];
export {};
//# sourceMappingURL=index.d.ts.map